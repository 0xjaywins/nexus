
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;

    /* Cyberpunk theme colors - Light Mode */
    --void: 220 70% 95%;
    --neon-cyan: 183 100% 40%;
    --neon-magenta: 300 100% 45%;
    --neon-green: 135 100% 45%;
    --neon-red: 350 100% 50%;
    --text-primary: 240 10% 20%;
    --text-secondary: 240 5% 45%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;

    /* Cyberpunk theme colors - Dark Mode */
    --void: 250 50% 4%;
    --neon-cyan: 183 100% 50%;
    --neon-magenta: 300 100% 50%;
    --neon-green: 135 100% 50%;
    --neon-red: 350 100% 50%;
    --text-primary: 0 0% 88%;
    --text-secondary: 0 0% 63%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-orbitron;
  }
}



============================================================





"use client";

import { useAccount, useBalance, useReadContract } from "wagmi";
import { formatUnits } from "viem";
import { tokens } from "../../config/config"; // Updated import to match new structure

// ERC-20 ABI for balanceOf and decimals
const erc20Abi = [
  {
    name: "balanceOf",
    type: "function",
    stateMutability: "view",
    inputs: [{ name: "account", type: "address" }],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    name: "decimals",
    type: "function",
    stateMutability: "view",
    inputs: [],
    outputs: [{ name: "", type: "uint256" }],
  },
] as const;

export default function useTokenBalances() {
  const { address } = useAccount();

  // Early return if tokens or address is not available
  if (!tokens || !address) {
    return {
      balances: [],
      isLoading: false,
      error: !tokens
        ? "Token configuration unavailable"
        : "Wallet address not connected",
    };
  }

  // Fetch native balance (MON)
  const { data: nativeBalance, error: nativeError } = useBalance({
    address,
    chainId: 10143, // Monad Testnet
  });

  // List of ERC-20 tokens to fetch
  const tokenList = Object.keys(tokens).map((token) => ({
    symbol: token,
    address: tokens[token as keyof typeof tokens].address,
    decimals: tokens[token as keyof typeof tokens].decimals,
  }));

  // Fetch ERC-20 balances
  const balances = tokenList.map((token) => {
    // Skip tokens with no address (e.g., MON)
    if (!token.address || token.address === "0x10143MON...") {
      return {
        token: token.symbol,
        balance: "0",
        error: null,
      };
    }

    const { data: balance, error } = useReadContract({
      address: token.address as `0x${string}`,
      abi: erc20Abi,
      functionName: "balanceOf",
      args: [address || "0x"],
      chainId: 10143,
    });

    return {
      token: token.symbol,
      balance: balance
        ? formatUnits(BigInt(balance.toString()), token.decimals)
        : "0",
      error,
    };
  });

  // Combine native and ERC-20 balances
  const allBalances = [
    {
      token: "MON",
      balance: nativeBalance ? formatUnits(nativeBalance.value, 18) : "0",
      error: nativeError,
    },
    ...balances.filter((b) => b.token !== "MON"), // Avoid duplicating MON
  ];

  return {
    balances: allBalances,
    isLoading: !address || balances.some((b) => !b.balance && !b.error),
    error: nativeError || balances.find((b) => b.error)?.error || null,
  };
}
